// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get("approved");
    return value!.toBytes();
  }

  set approved(value: Bytes) {
    this.set("approved", Value.fromBytes(value));
  }
}

export class AddedDaiToVoting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddedDaiToVoting entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AddedDaiToVoting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AddedDaiToVoting", id.toString(), this);
    }
  }

  static load(id: string): AddedDaiToVoting | null {
    return changetype<AddedDaiToVoting | null>(
      store.get("AddedDaiToVoting", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get voter(): Bytes {
    let value = this.get("voter");
    return value!.toBytes();
  }

  set voter(value: Bytes) {
    this.set("voter", Value.fromBytes(value));
  }

  get stakingPositionId(): BigInt {
    let value = this.get("stakingPositionId");
    return value!.toBigInt();
  }

  set stakingPositionId(value: BigInt) {
    this.set("stakingPositionId", Value.fromBigInt(value));
  }

  get votingPositionId(): BigInt {
    let value = this.get("votingPositionId");
    return value!.toBigInt();
  }

  set votingPositionId(value: BigInt) {
    this.set("votingPositionId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get votes(): BigInt {
    let value = this.get("votes");
    return value!.toBigInt();
  }

  set votes(value: BigInt) {
    this.set("votes", Value.fromBigInt(value));
  }
}

export class AddedZooToVoting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddedZooToVoting entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AddedZooToVoting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AddedZooToVoting", id.toString(), this);
    }
  }

  static load(id: string): AddedZooToVoting | null {
    return changetype<AddedZooToVoting | null>(
      store.get("AddedZooToVoting", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get voter(): Bytes {
    let value = this.get("voter");
    return value!.toBytes();
  }

  set voter(value: Bytes) {
    this.set("voter", Value.fromBytes(value));
  }

  get stakingPositionId(): BigInt {
    let value = this.get("stakingPositionId");
    return value!.toBigInt();
  }

  set stakingPositionId(value: BigInt) {
    this.set("stakingPositionId", Value.fromBigInt(value));
  }

  get votingPositionId(): BigInt {
    let value = this.get("votingPositionId");
    return value!.toBigInt();
  }

  set votingPositionId(value: BigInt) {
    this.set("votingPositionId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get votes(): BigInt {
    let value = this.get("votes");
    return value!.toBigInt();
  }

  set votes(value: BigInt) {
    this.set("votes", Value.fromBigInt(value));
  }
}

export class ChosenWinner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChosenWinner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChosenWinner must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChosenWinner", id.toString(), this);
    }
  }

  static load(id: string): ChosenWinner | null {
    return changetype<ChosenWinner | null>(store.get("ChosenWinner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get fighter1(): BigInt {
    let value = this.get("fighter1");
    return value!.toBigInt();
  }

  set fighter1(value: BigInt) {
    this.set("fighter1", Value.fromBigInt(value));
  }

  get fighter2(): BigInt {
    let value = this.get("fighter2");
    return value!.toBigInt();
  }

  set fighter2(value: BigInt) {
    this.set("fighter2", Value.fromBigInt(value));
  }

  get winner(): boolean {
    let value = this.get("winner");
    return value!.toBoolean();
  }

  set winner(value: boolean) {
    this.set("winner", Value.fromBoolean(value));
  }

  get pairIndex(): BigInt {
    let value = this.get("pairIndex");
    return value!.toBigInt();
  }

  set pairIndex(value: BigInt) {
    this.set("pairIndex", Value.fromBigInt(value));
  }

  get playedPairsAmount(): BigInt {
    let value = this.get("playedPairsAmount");
    return value!.toBigInt();
  }

  set playedPairsAmount(value: BigInt) {
    this.set("playedPairsAmount", Value.fromBigInt(value));
  }
}

export class ClaimedRewardFromStaking extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ClaimedRewardFromStaking entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClaimedRewardFromStaking must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ClaimedRewardFromStaking", id.toString(), this);
    }
  }

  static load(id: string): ClaimedRewardFromStaking | null {
    return changetype<ClaimedRewardFromStaking | null>(
      store.get("ClaimedRewardFromStaking", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value!.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get stakingPositionId(): BigInt {
    let value = this.get("stakingPositionId");
    return value!.toBigInt();
  }

  set stakingPositionId(value: BigInt) {
    this.set("stakingPositionId", Value.fromBigInt(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value!.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }

  get yTokenReward(): BigInt {
    let value = this.get("yTokenReward");
    return value!.toBigInt();
  }

  set yTokenReward(value: BigInt) {
    this.set("yTokenReward", Value.fromBigInt(value));
  }

  get daiReward(): BigInt {
    let value = this.get("daiReward");
    return value!.toBigInt();
  }

  set daiReward(value: BigInt) {
    this.set("daiReward", Value.fromBigInt(value));
  }
}

export class ClaimedRewardFromVoting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ClaimedRewardFromVoting entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClaimedRewardFromVoting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ClaimedRewardFromVoting", id.toString(), this);
    }
  }

  static load(id: string): ClaimedRewardFromVoting | null {
    return changetype<ClaimedRewardFromVoting | null>(
      store.get("ClaimedRewardFromVoting", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get voter(): Bytes {
    let value = this.get("voter");
    return value!.toBytes();
  }

  set voter(value: Bytes) {
    this.set("voter", Value.fromBytes(value));
  }

  get stakingPositionId(): BigInt {
    let value = this.get("stakingPositionId");
    return value!.toBigInt();
  }

  set stakingPositionId(value: BigInt) {
    this.set("stakingPositionId", Value.fromBigInt(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value!.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }

  get yTokenReward(): BigInt {
    let value = this.get("yTokenReward");
    return value!.toBigInt();
  }

  set yTokenReward(value: BigInt) {
    this.set("yTokenReward", Value.fromBigInt(value));
  }

  get daiReward(): BigInt {
    let value = this.get("daiReward");
    return value!.toBigInt();
  }

  set daiReward(value: BigInt) {
    this.set("daiReward", Value.fromBigInt(value));
  }

  get votingPositionId(): BigInt {
    let value = this.get("votingPositionId");
    return value!.toBigInt();
  }

  set votingPositionId(value: BigInt) {
    this.set("votingPositionId", Value.fromBigInt(value));
  }
}

export class CreatedStakerPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CreatedStakerPosition entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CreatedStakerPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CreatedStakerPosition", id.toString(), this);
    }
  }

  static load(id: string): CreatedStakerPosition | null {
    return changetype<CreatedStakerPosition | null>(
      store.get("CreatedStakerPosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value!.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get stakingPositionId(): BigInt {
    let value = this.get("stakingPositionId");
    return value!.toBigInt();
  }

  set stakingPositionId(value: BigInt) {
    this.set("stakingPositionId", Value.fromBigInt(value));
  }
}

export class CreatedVotingPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CreatedVotingPosition entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CreatedVotingPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CreatedVotingPosition", id.toString(), this);
    }
  }

  static load(id: string): CreatedVotingPosition | null {
    return changetype<CreatedVotingPosition | null>(
      store.get("CreatedVotingPosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get voter(): Bytes {
    let value = this.get("voter");
    return value!.toBytes();
  }

  set voter(value: Bytes) {
    this.set("voter", Value.fromBytes(value));
  }

  get stakingPositionId(): BigInt {
    let value = this.get("stakingPositionId");
    return value!.toBigInt();
  }

  set stakingPositionId(value: BigInt) {
    this.set("stakingPositionId", Value.fromBigInt(value));
  }

  get daiAmount(): BigInt {
    let value = this.get("daiAmount");
    return value!.toBigInt();
  }

  set daiAmount(value: BigInt) {
    this.set("daiAmount", Value.fromBigInt(value));
  }

  get votes(): BigInt {
    let value = this.get("votes");
    return value!.toBigInt();
  }

  set votes(value: BigInt) {
    this.set("votes", Value.fromBigInt(value));
  }

  get votingPositionId(): BigInt {
    let value = this.get("votingPositionId");
    return value!.toBigInt();
  }

  set votingPositionId(value: BigInt) {
    this.set("votingPositionId", Value.fromBigInt(value));
  }
}

export class EpochUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EpochUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EpochUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EpochUpdated", id.toString(), this);
    }
  }

  static load(id: string): EpochUpdated | null {
    return changetype<EpochUpdated | null>(store.get("EpochUpdated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get newEpoch(): BigInt {
    let value = this.get("newEpoch");
    return value!.toBigInt();
  }

  set newEpoch(value: BigInt) {
    this.set("newEpoch", Value.fromBigInt(value));
  }
}

export class LiquidatedVotingPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LiquidatedVotingPosition entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidatedVotingPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiquidatedVotingPosition", id.toString(), this);
    }
  }

  static load(id: string): LiquidatedVotingPosition | null {
    return changetype<LiquidatedVotingPosition | null>(
      store.get("LiquidatedVotingPosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get voter(): Bytes {
    let value = this.get("voter");
    return value!.toBytes();
  }

  set voter(value: Bytes) {
    this.set("voter", Value.fromBytes(value));
  }

  get stakingPositionId(): BigInt {
    let value = this.get("stakingPositionId");
    return value!.toBigInt();
  }

  set stakingPositionId(value: BigInt) {
    this.set("stakingPositionId", Value.fromBigInt(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value!.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }

  get votingPositionId(): BigInt {
    let value = this.get("votingPositionId");
    return value!.toBigInt();
  }

  set votingPositionId(value: BigInt) {
    this.set("votingPositionId", Value.fromBigInt(value));
  }

  get zooReturned(): BigInt {
    let value = this.get("zooReturned");
    return value!.toBigInt();
  }

  set zooReturned(value: BigInt) {
    this.set("zooReturned", Value.fromBigInt(value));
  }

  get daiReceived(): BigInt {
    let value = this.get("daiReceived");
    return value!.toBigInt();
  }

  set daiReceived(value: BigInt) {
    this.set("daiReceived", Value.fromBigInt(value));
  }
}

export class BATTLE_ARENA_KOVANOwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save BATTLE_ARENA_KOVANOwnershipTransferred entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BATTLE_ARENA_KOVANOwnershipTransferred must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BATTLE_ARENA_KOVANOwnershipTransferred", id.toString(), this);
    }
  }

  static load(id: string): BATTLE_ARENA_KOVANOwnershipTransferred | null {
    return changetype<BATTLE_ARENA_KOVANOwnershipTransferred | null>(
      store.get("BATTLE_ARENA_KOVANOwnershipTransferred", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class PairedNft extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PairedNft entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PairedNft must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PairedNft", id.toString(), this);
    }
  }

  static load(id: string): PairedNft | null {
    return changetype<PairedNft | null>(store.get("PairedNft", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get fighter1(): BigInt {
    let value = this.get("fighter1");
    return value!.toBigInt();
  }

  set fighter1(value: BigInt) {
    this.set("fighter1", Value.fromBigInt(value));
  }

  get fighter2(): BigInt {
    let value = this.get("fighter2");
    return value!.toBigInt();
  }

  set fighter2(value: BigInt) {
    this.set("fighter2", Value.fromBigInt(value));
  }

  get pairIndex(): BigInt {
    let value = this.get("pairIndex");
    return value!.toBigInt();
  }

  set pairIndex(value: BigInt) {
    this.set("pairIndex", Value.fromBigInt(value));
  }
}

export class RecomputedDaiVotes extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RecomputedDaiVotes entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RecomputedDaiVotes must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RecomputedDaiVotes", id.toString(), this);
    }
  }

  static load(id: string): RecomputedDaiVotes | null {
    return changetype<RecomputedDaiVotes | null>(
      store.get("RecomputedDaiVotes", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get voter(): Bytes {
    let value = this.get("voter");
    return value!.toBytes();
  }

  set voter(value: Bytes) {
    this.set("voter", Value.fromBytes(value));
  }

  get stakingPositionId(): BigInt {
    let value = this.get("stakingPositionId");
    return value!.toBigInt();
  }

  set stakingPositionId(value: BigInt) {
    this.set("stakingPositionId", Value.fromBigInt(value));
  }

  get votingPositionId(): BigInt {
    let value = this.get("votingPositionId");
    return value!.toBigInt();
  }

  set votingPositionId(value: BigInt) {
    this.set("votingPositionId", Value.fromBigInt(value));
  }

  get newVotes(): BigInt {
    let value = this.get("newVotes");
    return value!.toBigInt();
  }

  set newVotes(value: BigInt) {
    this.set("newVotes", Value.fromBigInt(value));
  }

  get oldVotes(): BigInt {
    let value = this.get("oldVotes");
    return value!.toBigInt();
  }

  set oldVotes(value: BigInt) {
    this.set("oldVotes", Value.fromBigInt(value));
  }
}

export class RecomputedZooVotes extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RecomputedZooVotes entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RecomputedZooVotes must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RecomputedZooVotes", id.toString(), this);
    }
  }

  static load(id: string): RecomputedZooVotes | null {
    return changetype<RecomputedZooVotes | null>(
      store.get("RecomputedZooVotes", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get voter(): Bytes {
    let value = this.get("voter");
    return value!.toBytes();
  }

  set voter(value: Bytes) {
    this.set("voter", Value.fromBytes(value));
  }

  get stakingPositionId(): BigInt {
    let value = this.get("stakingPositionId");
    return value!.toBigInt();
  }

  set stakingPositionId(value: BigInt) {
    this.set("stakingPositionId", Value.fromBigInt(value));
  }

  get votingPositionId(): BigInt {
    let value = this.get("votingPositionId");
    return value!.toBigInt();
  }

  set votingPositionId(value: BigInt) {
    this.set("votingPositionId", Value.fromBigInt(value));
  }

  get newVotes(): BigInt {
    let value = this.get("newVotes");
    return value!.toBigInt();
  }

  set newVotes(value: BigInt) {
    this.set("newVotes", Value.fromBigInt(value));
  }

  get oldVotes(): BigInt {
    let value = this.get("oldVotes");
    return value!.toBigInt();
  }

  set oldVotes(value: BigInt) {
    this.set("oldVotes", Value.fromBigInt(value));
  }
}

export class RemovedStakerPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RemovedStakerPosition entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RemovedStakerPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemovedStakerPosition", id.toString(), this);
    }
  }

  static load(id: string): RemovedStakerPosition | null {
    return changetype<RemovedStakerPosition | null>(
      store.get("RemovedStakerPosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value!.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get stakingPositionId(): BigInt {
    let value = this.get("stakingPositionId");
    return value!.toBigInt();
  }

  set stakingPositionId(value: BigInt) {
    this.set("stakingPositionId", Value.fromBigInt(value));
  }
}

export class WithdrawedDaiFromVoting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WithdrawedDaiFromVoting entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithdrawedDaiFromVoting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawedDaiFromVoting", id.toString(), this);
    }
  }

  static load(id: string): WithdrawedDaiFromVoting | null {
    return changetype<WithdrawedDaiFromVoting | null>(
      store.get("WithdrawedDaiFromVoting", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get voter(): Bytes {
    let value = this.get("voter");
    return value!.toBytes();
  }

  set voter(value: Bytes) {
    this.set("voter", Value.fromBytes(value));
  }

  get stakingPositionId(): BigInt {
    let value = this.get("stakingPositionId");
    return value!.toBigInt();
  }

  set stakingPositionId(value: BigInt) {
    this.set("stakingPositionId", Value.fromBigInt(value));
  }

  get votingPositionId(): BigInt {
    let value = this.get("votingPositionId");
    return value!.toBigInt();
  }

  set votingPositionId(value: BigInt) {
    this.set("votingPositionId", Value.fromBigInt(value));
  }

  get daiNumber(): BigInt {
    let value = this.get("daiNumber");
    return value!.toBigInt();
  }

  set daiNumber(value: BigInt) {
    this.set("daiNumber", Value.fromBigInt(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value!.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }
}

export class WithdrawedZooFromVoting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WithdrawedZooFromVoting entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithdrawedZooFromVoting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawedZooFromVoting", id.toString(), this);
    }
  }

  static load(id: string): WithdrawedZooFromVoting | null {
    return changetype<WithdrawedZooFromVoting | null>(
      store.get("WithdrawedZooFromVoting", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): BigInt {
    let value = this.get("currentEpoch");
    return value!.toBigInt();
  }

  set currentEpoch(value: BigInt) {
    this.set("currentEpoch", Value.fromBigInt(value));
  }

  get voter(): Bytes {
    let value = this.get("voter");
    return value!.toBytes();
  }

  set voter(value: Bytes) {
    this.set("voter", Value.fromBytes(value));
  }

  get stakingPositionId(): BigInt {
    let value = this.get("stakingPositionId");
    return value!.toBigInt();
  }

  set stakingPositionId(value: BigInt) {
    this.set("stakingPositionId", Value.fromBigInt(value));
  }

  get votingPositionId(): BigInt {
    let value = this.get("votingPositionId");
    return value!.toBigInt();
  }

  set votingPositionId(value: BigInt) {
    this.set("votingPositionId", Value.fromBigInt(value));
  }

  get zooNumber(): BigInt {
    let value = this.get("zooNumber");
    return value!.toBigInt();
  }

  set zooNumber(value: BigInt) {
    this.set("zooNumber", Value.fromBigInt(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value!.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }
}
