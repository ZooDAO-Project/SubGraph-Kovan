// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedDaiToVoting extends ethereum.Event {
  get params(): AddedDaiToVoting__Params {
    return new AddedDaiToVoting__Params(this);
  }
}

export class AddedDaiToVoting__Params {
  _event: AddedDaiToVoting;

  constructor(event: AddedDaiToVoting) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakingPositionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get votingPositionId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get votes(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class AddedZooToVoting extends ethereum.Event {
  get params(): AddedZooToVoting__Params {
    return new AddedZooToVoting__Params(this);
  }
}

export class AddedZooToVoting__Params {
  _event: AddedZooToVoting;

  constructor(event: AddedZooToVoting) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakingPositionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get votingPositionId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get votes(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ChosenWinner extends ethereum.Event {
  get params(): ChosenWinner__Params {
    return new ChosenWinner__Params(this);
  }
}

export class ChosenWinner__Params {
  _event: ChosenWinner;

  constructor(event: ChosenWinner) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fighter1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fighter2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winner(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get pairIndex(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get playedPairsAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ClaimedRewardFromStaking extends ethereum.Event {
  get params(): ClaimedRewardFromStaking__Params {
    return new ClaimedRewardFromStaking__Params(this);
  }
}

export class ClaimedRewardFromStaking__Params {
  _event: ClaimedRewardFromStaking;

  constructor(event: ClaimedRewardFromStaking) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakingPositionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get yTokenReward(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get daiReward(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ClaimedRewardFromVoting extends ethereum.Event {
  get params(): ClaimedRewardFromVoting__Params {
    return new ClaimedRewardFromVoting__Params(this);
  }
}

export class ClaimedRewardFromVoting__Params {
  _event: ClaimedRewardFromVoting;

  constructor(event: ClaimedRewardFromVoting) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakingPositionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get yTokenReward(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get daiReward(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get votingPositionId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class CreatedStakerPosition extends ethereum.Event {
  get params(): CreatedStakerPosition__Params {
    return new CreatedStakerPosition__Params(this);
  }
}

export class CreatedStakerPosition__Params {
  _event: CreatedStakerPosition;

  constructor(event: CreatedStakerPosition) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakingPositionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CreatedVotingPosition extends ethereum.Event {
  get params(): CreatedVotingPosition__Params {
    return new CreatedVotingPosition__Params(this);
  }
}

export class CreatedVotingPosition__Params {
  _event: CreatedVotingPosition;

  constructor(event: CreatedVotingPosition) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakingPositionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get daiAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get votes(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get votingPositionId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class EpochUpdated extends ethereum.Event {
  get params(): EpochUpdated__Params {
    return new EpochUpdated__Params(this);
  }
}

export class EpochUpdated__Params {
  _event: EpochUpdated;

  constructor(event: EpochUpdated) {
    this._event = event;
  }

  get date(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newEpoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LiquidatedVotingPosition extends ethereum.Event {
  get params(): LiquidatedVotingPosition__Params {
    return new LiquidatedVotingPosition__Params(this);
  }
}

export class LiquidatedVotingPosition__Params {
  _event: LiquidatedVotingPosition;

  constructor(event: LiquidatedVotingPosition) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakingPositionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get votingPositionId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get zooReturned(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get daiReceived(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class BATTLE_ARENA_KOVANOwnershipTransferred extends ethereum.Event {
  get params(): BATTLE_ARENA_KOVANOwnershipTransferred__Params {
    return new BATTLE_ARENA_KOVANOwnershipTransferred__Params(this);
  }
}

export class BATTLE_ARENA_KOVANOwnershipTransferred__Params {
  _event: BATTLE_ARENA_KOVANOwnershipTransferred;

  constructor(event: BATTLE_ARENA_KOVANOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PairedNft extends ethereum.Event {
  get params(): PairedNft__Params {
    return new PairedNft__Params(this);
  }
}

export class PairedNft__Params {
  _event: PairedNft;

  constructor(event: PairedNft) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fighter1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fighter2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pairIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RecomputedDaiVotes extends ethereum.Event {
  get params(): RecomputedDaiVotes__Params {
    return new RecomputedDaiVotes__Params(this);
  }
}

export class RecomputedDaiVotes__Params {
  _event: RecomputedDaiVotes;

  constructor(event: RecomputedDaiVotes) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakingPositionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get votingPositionId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newVotes(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get oldVotes(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RecomputedZooVotes extends ethereum.Event {
  get params(): RecomputedZooVotes__Params {
    return new RecomputedZooVotes__Params(this);
  }
}

export class RecomputedZooVotes__Params {
  _event: RecomputedZooVotes;

  constructor(event: RecomputedZooVotes) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakingPositionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get votingPositionId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newVotes(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get oldVotes(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RemovedStakerPosition extends ethereum.Event {
  get params(): RemovedStakerPosition__Params {
    return new RemovedStakerPosition__Params(this);
  }
}

export class RemovedStakerPosition__Params {
  _event: RemovedStakerPosition;

  constructor(event: RemovedStakerPosition) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakingPositionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawedDaiFromVoting extends ethereum.Event {
  get params(): WithdrawedDaiFromVoting__Params {
    return new WithdrawedDaiFromVoting__Params(this);
  }
}

export class WithdrawedDaiFromVoting__Params {
  _event: WithdrawedDaiFromVoting;

  constructor(event: WithdrawedDaiFromVoting) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakingPositionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get votingPositionId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get daiNumber(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class WithdrawedZooFromVoting extends ethereum.Event {
  get params(): WithdrawedZooFromVoting__Params {
    return new WithdrawedZooFromVoting__Params(this);
  }
}

export class WithdrawedZooFromVoting__Params {
  _event: WithdrawedZooFromVoting;

  constructor(event: WithdrawedZooFromVoting) {
    this._event = event;
  }

  get currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakingPositionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get votingPositionId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get zooNumber(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class BATTLE_ARENA_KOVAN__createVotingPositionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getVotes(): BigInt {
    return this.value0;
  }

  getVotingPositionId(): BigInt {
    return this.value1;
  }
}

export class BATTLE_ARENA_KOVAN__getPendingStakerRewardResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getStakerReward(): BigInt {
    return this.value0;
  }

  getEnd(): BigInt {
    return this.value1;
  }
}

export class BATTLE_ARENA_KOVAN__pairsInEpochResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getToken1(): BigInt {
    return this.value0;
  }

  getToken2(): BigInt {
    return this.value1;
  }

  getPlayedInEpoch(): boolean {
    return this.value2;
  }

  getWin(): boolean {
    return this.value3;
  }
}

export class BATTLE_ARENA_KOVAN__rewardsForEpochResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getYTokensSaldo(): BigInt {
    return this.value0;
  }

  getVotes(): BigInt {
    return this.value1;
  }

  getYTokens(): BigInt {
    return this.value2;
  }

  getTokensAtBattleStart(): BigInt {
    return this.value3;
  }

  getPricePerShareAtBattleStart(): BigInt {
    return this.value4;
  }

  getPricePerShareCoef(): BigInt {
    return this.value5;
  }
}

export class BATTLE_ARENA_KOVAN__stakingPositionsValuesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getStartDate(): BigInt {
    return this.value0;
  }

  getStartEpoch(): BigInt {
    return this.value1;
  }

  getEndDate(): BigInt {
    return this.value2;
  }

  getEndEpoch(): BigInt {
    return this.value3;
  }

  getLastRewardedEpoch(): BigInt {
    return this.value4;
  }

  getLastUpdateEpoch(): BigInt {
    return this.value5;
  }
}

export class BATTLE_ARENA_KOVAN__votingPositionsValuesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getStakingPositionId(): BigInt {
    return this.value0;
  }

  getStartDate(): BigInt {
    return this.value1;
  }

  getEndDate(): BigInt {
    return this.value2;
  }

  getDaiInvested(): BigInt {
    return this.value3;
  }

  getYTokensNumber(): BigInt {
    return this.value4;
  }

  getZooInvested(): BigInt {
    return this.value5;
  }

  getDaiVotes(): BigInt {
    return this.value6;
  }

  getVotes(): BigInt {
    return this.value7;
  }

  getStartEpoch(): BigInt {
    return this.value8;
  }

  getEndEpoch(): BigInt {
    return this.value9;
  }

  getLastRewardedEpoch(): BigInt {
    return this.value10;
  }

  getYTokensRewardDebt(): BigInt {
    return this.value11;
  }
}

export class BATTLE_ARENA_KOVAN extends ethereum.SmartContract {
  static bind(address: Address): BATTLE_ARENA_KOVAN {
    return new BATTLE_ARENA_KOVAN("BATTLE_ARENA_KOVAN", address);
  }

  activeStakerPositions(param0: BigInt): BigInt {
    let result = super.call(
      "activeStakerPositions",
      "activeStakerPositions(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_activeStakerPositions(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeStakerPositions",
      "activeStakerPositions(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addDaiToVoting(
    votingPositionId: BigInt,
    voter: Address,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "addDaiToVoting",
      "addDaiToVoting(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(votingPositionId),
        ethereum.Value.fromAddress(voter),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_addDaiToVoting(
    votingPositionId: BigInt,
    voter: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addDaiToVoting",
      "addDaiToVoting(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(votingPositionId),
        ethereum.Value.fromAddress(voter),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addZooToVoting(
    votingPositionId: BigInt,
    voter: Address,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "addZooToVoting",
      "addZooToVoting(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(votingPositionId),
        ethereum.Value.fromAddress(voter),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_addZooToVoting(
    votingPositionId: BigInt,
    voter: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addZooToVoting",
      "addZooToVoting(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(votingPositionId),
        ethereum.Value.fromAddress(voter),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimRewardFromStaking(
    stakingPositionId: BigInt,
    staker: Address,
    beneficiary: Address
  ): BigInt {
    let result = super.call(
      "claimRewardFromStaking",
      "claimRewardFromStaking(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakingPositionId),
        ethereum.Value.fromAddress(staker),
        ethereum.Value.fromAddress(beneficiary)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimRewardFromStaking(
    stakingPositionId: BigInt,
    staker: Address,
    beneficiary: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimRewardFromStaking",
      "claimRewardFromStaking(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakingPositionId),
        ethereum.Value.fromAddress(staker),
        ethereum.Value.fromAddress(beneficiary)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimRewardFromVoting(
    votingPositionId: BigInt,
    voter: Address,
    beneficiary: Address
  ): BigInt {
    let result = super.call(
      "claimRewardFromVoting",
      "claimRewardFromVoting(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(votingPositionId),
        ethereum.Value.fromAddress(voter),
        ethereum.Value.fromAddress(beneficiary)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimRewardFromVoting(
    votingPositionId: BigInt,
    voter: Address,
    beneficiary: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimRewardFromVoting",
      "claimRewardFromVoting(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(votingPositionId),
        ethereum.Value.fromAddress(voter),
        ethereum.Value.fromAddress(beneficiary)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeLastEpoch(votingPositionId: BigInt): BigInt {
    let result = super.call(
      "computeLastEpoch",
      "computeLastEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(votingPositionId)]
    );

    return result[0].toBigInt();
  }

  try_computeLastEpoch(votingPositionId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeLastEpoch",
      "computeLastEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(votingPositionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createStakerPosition(staker: Address): BigInt {
    let result = super.call(
      "createStakerPosition",
      "createStakerPosition(address):(uint256)",
      [ethereum.Value.fromAddress(staker)]
    );

    return result[0].toBigInt();
  }

  try_createStakerPosition(staker: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createStakerPosition",
      "createStakerPosition(address):(uint256)",
      [ethereum.Value.fromAddress(staker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createVotingPosition(
    stakingPositionId: BigInt,
    voter: Address,
    amount: BigInt
  ): BATTLE_ARENA_KOVAN__createVotingPositionResult {
    let result = super.call(
      "createVotingPosition",
      "createVotingPosition(uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakingPositionId),
        ethereum.Value.fromAddress(voter),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new BATTLE_ARENA_KOVAN__createVotingPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_createVotingPosition(
    stakingPositionId: BigInt,
    voter: Address,
    amount: BigInt
  ): ethereum.CallResult<BATTLE_ARENA_KOVAN__createVotingPositionResult> {
    let result = super.tryCall(
      "createVotingPosition",
      "createVotingPosition(uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakingPositionId),
        ethereum.Value.fromAddress(voter),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BATTLE_ARENA_KOVAN__createVotingPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  currentEpoch(): BigInt {
    let result = super.call("currentEpoch", "currentEpoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentEpoch", "currentEpoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dai(): Address {
    let result = super.call("dai", "dai():(address)", []);

    return result[0].toAddress();
  }

  try_dai(): ethereum.CallResult<Address> {
    let result = super.tryCall("dai", "dai():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  epochDuration(): BigInt {
    let result = super.call("epochDuration", "epochDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochDuration",
      "epochDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochStartDate(): BigInt {
    let result = super.call("epochStartDate", "epochStartDate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochStartDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochStartDate",
      "epochStartDate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fifthStageDuration(): BigInt {
    let result = super.call(
      "fifthStageDuration",
      "fifthStageDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fifthStageDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fifthStageDuration",
      "fifthStageDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  firstStageDuration(): BigInt {
    let result = super.call(
      "firstStageDuration",
      "firstStageDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_firstStageDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "firstStageDuration",
      "firstStageDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fourthStageDuration(): BigInt {
    let result = super.call(
      "fourthStageDuration",
      "fourthStageDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fourthStageDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fourthStageDuration",
      "fourthStageDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gasPool(): Address {
    let result = super.call("gasPool", "gasPool():(address)", []);

    return result[0].toAddress();
  }

  try_gasPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("gasPool", "gasPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentStage(): i32 {
    let result = super.call("getCurrentStage", "getCurrentStage():(uint8)", []);

    return result[0].toI32();
  }

  try_getCurrentStage(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getCurrentStage",
      "getCurrentStage():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getNftPairLength(epoch: BigInt): BigInt {
    let result = super.call(
      "getNftPairLength",
      "getNftPairLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toBigInt();
  }

  try_getNftPairLength(epoch: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNftPairLength",
      "getNftPairLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingStakerReward(
    stakingPositionId: BigInt
  ): BATTLE_ARENA_KOVAN__getPendingStakerRewardResult {
    let result = super.call(
      "getPendingStakerReward",
      "getPendingStakerReward(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(stakingPositionId)]
    );

    return new BATTLE_ARENA_KOVAN__getPendingStakerRewardResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPendingStakerReward(
    stakingPositionId: BigInt
  ): ethereum.CallResult<BATTLE_ARENA_KOVAN__getPendingStakerRewardResult> {
    let result = super.tryCall(
      "getPendingStakerReward",
      "getPendingStakerReward(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(stakingPositionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BATTLE_ARENA_KOVAN__getPendingStakerRewardResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getPendingVoterReward(
    votingPositionId: BigInt,
    startEpoch: BigInt,
    endEpoch: BigInt
  ): BigInt {
    let result = super.call(
      "getPendingVoterReward",
      "getPendingVoterReward(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(votingPositionId),
        ethereum.Value.fromUnsignedBigInt(startEpoch),
        ethereum.Value.fromUnsignedBigInt(endEpoch)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPendingVoterReward(
    votingPositionId: BigInt,
    startEpoch: BigInt,
    endEpoch: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingVoterReward",
      "getPendingVoterReward(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(votingPositionId),
        ethereum.Value.fromUnsignedBigInt(startEpoch),
        ethereum.Value.fromUnsignedBigInt(endEpoch)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerPositionsLength(): BigInt {
    let result = super.call(
      "getStakerPositionsLength",
      "getStakerPositionsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStakerPositionsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakerPositionsLength",
      "getStakerPositionsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftStakingPosition(): Address {
    let result = super.call(
      "nftStakingPosition",
      "nftStakingPosition():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_nftStakingPosition(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nftStakingPosition",
      "nftStakingPosition():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nftVotingPosition(): Address {
    let result = super.call(
      "nftVotingPosition",
      "nftVotingPosition():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_nftVotingPosition(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nftVotingPosition",
      "nftVotingPosition():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nftsInGame(): BigInt {
    let result = super.call("nftsInGame", "nftsInGame():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nftsInGame(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nftsInGame", "nftsInGame():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberOfNftsWithNonZeroVotes(): BigInt {
    let result = super.call(
      "numberOfNftsWithNonZeroVotes",
      "numberOfNftsWithNonZeroVotes():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfNftsWithNonZeroVotes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfNftsWithNonZeroVotes",
      "numberOfNftsWithNonZeroVotes():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberOfPlayedPairsInEpoch(param0: BigInt): BigInt {
    let result = super.call(
      "numberOfPlayedPairsInEpoch",
      "numberOfPlayedPairsInEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_numberOfPlayedPairsInEpoch(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfPlayedPairsInEpoch",
      "numberOfPlayedPairsInEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberOfStakingPositions(): BigInt {
    let result = super.call(
      "numberOfStakingPositions",
      "numberOfStakingPositions():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfStakingPositions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfStakingPositions",
      "numberOfStakingPositions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberOfVotingPositions(): BigInt {
    let result = super.call(
      "numberOfVotingPositions",
      "numberOfVotingPositions():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfVotingPositions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfVotingPositions",
      "numberOfVotingPositions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairsInEpoch(
    param0: BigInt,
    param1: BigInt
  ): BATTLE_ARENA_KOVAN__pairsInEpochResult {
    let result = super.call(
      "pairsInEpoch",
      "pairsInEpoch(uint256,uint256):(uint256,uint256,bool,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new BATTLE_ARENA_KOVAN__pairsInEpochResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBoolean()
    );
  }

  try_pairsInEpoch(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BATTLE_ARENA_KOVAN__pairsInEpochResult> {
    let result = super.tryCall(
      "pairsInEpoch",
      "pairsInEpoch(uint256,uint256):(uint256,uint256,bool,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BATTLE_ARENA_KOVAN__pairsInEpochResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBoolean()
      )
    );
  }

  randomRequested(): boolean {
    let result = super.call("randomRequested", "randomRequested():(bool)", []);

    return result[0].toBoolean();
  }

  try_randomRequested(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "randomRequested",
      "randomRequested():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardsForEpoch(
    param0: BigInt,
    param1: BigInt
  ): BATTLE_ARENA_KOVAN__rewardsForEpochResult {
    let result = super.call(
      "rewardsForEpoch",
      "rewardsForEpoch(uint256,uint256):(int256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new BATTLE_ARENA_KOVAN__rewardsForEpochResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_rewardsForEpoch(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BATTLE_ARENA_KOVAN__rewardsForEpochResult> {
    let result = super.tryCall(
      "rewardsForEpoch",
      "rewardsForEpoch(uint256,uint256):(int256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BATTLE_ARENA_KOVAN__rewardsForEpochResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  secondStageDuration(): BigInt {
    let result = super.call(
      "secondStageDuration",
      "secondStageDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_secondStageDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "secondStageDuration",
      "secondStageDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sharesToTokens(sharesAmount: BigInt): BigInt {
    let result = super.call(
      "sharesToTokens",
      "sharesToTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(sharesAmount)]
    );

    return result[0].toBigInt();
  }

  try_sharesToTokens(sharesAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sharesToTokens",
      "sharesToTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(sharesAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingPositionsValues(
    param0: BigInt
  ): BATTLE_ARENA_KOVAN__stakingPositionsValuesResult {
    let result = super.call(
      "stakingPositionsValues",
      "stakingPositionsValues(uint256):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BATTLE_ARENA_KOVAN__stakingPositionsValuesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_stakingPositionsValues(
    param0: BigInt
  ): ethereum.CallResult<BATTLE_ARENA_KOVAN__stakingPositionsValuesResult> {
    let result = super.tryCall(
      "stakingPositionsValues",
      "stakingPositionsValues(uint256):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BATTLE_ARENA_KOVAN__stakingPositionsValuesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  team(): Address {
    let result = super.call("team", "team():(address)", []);

    return result[0].toAddress();
  }

  try_team(): ethereum.CallResult<Address> {
    let result = super.tryCall("team", "team():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  thirdStageDuration(): BigInt {
    let result = super.call(
      "thirdStageDuration",
      "thirdStageDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_thirdStageDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "thirdStageDuration",
      "thirdStageDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensToShares(tokens: BigInt): BigInt {
    let result = super.call(
      "tokensToShares",
      "tokensToShares(int256):(int256)",
      [ethereum.Value.fromSignedBigInt(tokens)]
    );

    return result[0].toBigInt();
  }

  try_tokensToShares(tokens: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensToShares",
      "tokensToShares(int256):(int256)",
      [ethereum.Value.fromSignedBigInt(tokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  votingPositionsValues(
    param0: BigInt
  ): BATTLE_ARENA_KOVAN__votingPositionsValuesResult {
    let result = super.call(
      "votingPositionsValues",
      "votingPositionsValues(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BATTLE_ARENA_KOVAN__votingPositionsValuesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt()
    );
  }

  try_votingPositionsValues(
    param0: BigInt
  ): ethereum.CallResult<BATTLE_ARENA_KOVAN__votingPositionsValuesResult> {
    let result = super.tryCall(
      "votingPositionsValues",
      "votingPositionsValues(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BATTLE_ARENA_KOVAN__votingPositionsValuesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt()
      )
    );
  }

  zoo(): Address {
    let result = super.call("zoo", "zoo():(address)", []);

    return result[0].toAddress();
  }

  try_zoo(): ethereum.CallResult<Address> {
    let result = super.tryCall("zoo", "zoo():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  zooFunctions(): Address {
    let result = super.call("zooFunctions", "zooFunctions():(address)", []);

    return result[0].toAddress();
  }

  try_zooFunctions(): ethereum.CallResult<Address> {
    let result = super.tryCall("zooFunctions", "zooFunctions():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  zooGovernance(): Address {
    let result = super.call("zooGovernance", "zooGovernance():(address)", []);

    return result[0].toAddress();
  }

  try_zooGovernance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "zooGovernance",
      "zooGovernance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _zoo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _dai(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _vault(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _zooGovernance(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _treasuryPool(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _gasFeePool(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _teamAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _nftStakingPosition(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _nftVotingPosition(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddDaiToVotingCall extends ethereum.Call {
  get inputs(): AddDaiToVotingCall__Inputs {
    return new AddDaiToVotingCall__Inputs(this);
  }

  get outputs(): AddDaiToVotingCall__Outputs {
    return new AddDaiToVotingCall__Outputs(this);
  }
}

export class AddDaiToVotingCall__Inputs {
  _call: AddDaiToVotingCall;

  constructor(call: AddDaiToVotingCall) {
    this._call = call;
  }

  get votingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get voter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddDaiToVotingCall__Outputs {
  _call: AddDaiToVotingCall;

  constructor(call: AddDaiToVotingCall) {
    this._call = call;
  }

  get votes(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddZooToVotingCall extends ethereum.Call {
  get inputs(): AddZooToVotingCall__Inputs {
    return new AddZooToVotingCall__Inputs(this);
  }

  get outputs(): AddZooToVotingCall__Outputs {
    return new AddZooToVotingCall__Outputs(this);
  }
}

export class AddZooToVotingCall__Inputs {
  _call: AddZooToVotingCall;

  constructor(call: AddZooToVotingCall) {
    this._call = call;
  }

  get votingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get voter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddZooToVotingCall__Outputs {
  _call: AddZooToVotingCall;

  constructor(call: AddZooToVotingCall) {
    this._call = call;
  }

  get votes(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ChooseWinnerInPairCall extends ethereum.Call {
  get inputs(): ChooseWinnerInPairCall__Inputs {
    return new ChooseWinnerInPairCall__Inputs(this);
  }

  get outputs(): ChooseWinnerInPairCall__Outputs {
    return new ChooseWinnerInPairCall__Outputs(this);
  }
}

export class ChooseWinnerInPairCall__Inputs {
  _call: ChooseWinnerInPairCall;

  constructor(call: ChooseWinnerInPairCall) {
    this._call = call;
  }

  get pairIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChooseWinnerInPairCall__Outputs {
  _call: ChooseWinnerInPairCall;

  constructor(call: ChooseWinnerInPairCall) {
    this._call = call;
  }
}

export class ClaimRewardFromStakingCall extends ethereum.Call {
  get inputs(): ClaimRewardFromStakingCall__Inputs {
    return new ClaimRewardFromStakingCall__Inputs(this);
  }

  get outputs(): ClaimRewardFromStakingCall__Outputs {
    return new ClaimRewardFromStakingCall__Outputs(this);
  }
}

export class ClaimRewardFromStakingCall__Inputs {
  _call: ClaimRewardFromStakingCall;

  constructor(call: ClaimRewardFromStakingCall) {
    this._call = call;
  }

  get stakingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get staker(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClaimRewardFromStakingCall__Outputs {
  _call: ClaimRewardFromStakingCall;

  constructor(call: ClaimRewardFromStakingCall) {
    this._call = call;
  }

  get daiReward(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimRewardFromVotingCall extends ethereum.Call {
  get inputs(): ClaimRewardFromVotingCall__Inputs {
    return new ClaimRewardFromVotingCall__Inputs(this);
  }

  get outputs(): ClaimRewardFromVotingCall__Outputs {
    return new ClaimRewardFromVotingCall__Outputs(this);
  }
}

export class ClaimRewardFromVotingCall__Inputs {
  _call: ClaimRewardFromVotingCall;

  constructor(call: ClaimRewardFromVotingCall) {
    this._call = call;
  }

  get votingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get voter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClaimRewardFromVotingCall__Outputs {
  _call: ClaimRewardFromVotingCall;

  constructor(call: ClaimRewardFromVotingCall) {
    this._call = call;
  }

  get daiReward(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateStakerPositionCall extends ethereum.Call {
  get inputs(): CreateStakerPositionCall__Inputs {
    return new CreateStakerPositionCall__Inputs(this);
  }

  get outputs(): CreateStakerPositionCall__Outputs {
    return new CreateStakerPositionCall__Outputs(this);
  }
}

export class CreateStakerPositionCall__Inputs {
  _call: CreateStakerPositionCall;

  constructor(call: CreateStakerPositionCall) {
    this._call = call;
  }

  get staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateStakerPositionCall__Outputs {
  _call: CreateStakerPositionCall;

  constructor(call: CreateStakerPositionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateVotingPositionCall extends ethereum.Call {
  get inputs(): CreateVotingPositionCall__Inputs {
    return new CreateVotingPositionCall__Inputs(this);
  }

  get outputs(): CreateVotingPositionCall__Outputs {
    return new CreateVotingPositionCall__Outputs(this);
  }
}

export class CreateVotingPositionCall__Inputs {
  _call: CreateVotingPositionCall;

  constructor(call: CreateVotingPositionCall) {
    this._call = call;
  }

  get stakingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get voter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateVotingPositionCall__Outputs {
  _call: CreateVotingPositionCall;

  constructor(call: CreateVotingPositionCall) {
    this._call = call;
  }

  get votes(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get votingPositionId(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class PairNftCall extends ethereum.Call {
  get inputs(): PairNftCall__Inputs {
    return new PairNftCall__Inputs(this);
  }

  get outputs(): PairNftCall__Outputs {
    return new PairNftCall__Outputs(this);
  }
}

export class PairNftCall__Inputs {
  _call: PairNftCall;

  constructor(call: PairNftCall) {
    this._call = call;
  }

  get stakingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PairNftCall__Outputs {
  _call: PairNftCall;

  constructor(call: PairNftCall) {
    this._call = call;
  }
}

export class RecomputeDaiVotesCall extends ethereum.Call {
  get inputs(): RecomputeDaiVotesCall__Inputs {
    return new RecomputeDaiVotesCall__Inputs(this);
  }

  get outputs(): RecomputeDaiVotesCall__Outputs {
    return new RecomputeDaiVotesCall__Outputs(this);
  }
}

export class RecomputeDaiVotesCall__Inputs {
  _call: RecomputeDaiVotesCall;

  constructor(call: RecomputeDaiVotesCall) {
    this._call = call;
  }

  get votingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RecomputeDaiVotesCall__Outputs {
  _call: RecomputeDaiVotesCall;

  constructor(call: RecomputeDaiVotesCall) {
    this._call = call;
  }
}

export class RecomputeZooVotesCall extends ethereum.Call {
  get inputs(): RecomputeZooVotesCall__Inputs {
    return new RecomputeZooVotesCall__Inputs(this);
  }

  get outputs(): RecomputeZooVotesCall__Outputs {
    return new RecomputeZooVotesCall__Outputs(this);
  }
}

export class RecomputeZooVotesCall__Inputs {
  _call: RecomputeZooVotesCall;

  constructor(call: RecomputeZooVotesCall) {
    this._call = call;
  }

  get votingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RecomputeZooVotesCall__Outputs {
  _call: RecomputeZooVotesCall;

  constructor(call: RecomputeZooVotesCall) {
    this._call = call;
  }
}

export class RemoveStakerPositionCall extends ethereum.Call {
  get inputs(): RemoveStakerPositionCall__Inputs {
    return new RemoveStakerPositionCall__Inputs(this);
  }

  get outputs(): RemoveStakerPositionCall__Outputs {
    return new RemoveStakerPositionCall__Outputs(this);
  }
}

export class RemoveStakerPositionCall__Inputs {
  _call: RemoveStakerPositionCall;

  constructor(call: RemoveStakerPositionCall) {
    this._call = call;
  }

  get stakingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get staker(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveStakerPositionCall__Outputs {
  _call: RemoveStakerPositionCall;

  constructor(call: RemoveStakerPositionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestRandomCall extends ethereum.Call {
  get inputs(): RequestRandomCall__Inputs {
    return new RequestRandomCall__Inputs(this);
  }

  get outputs(): RequestRandomCall__Outputs {
    return new RequestRandomCall__Outputs(this);
  }
}

export class RequestRandomCall__Inputs {
  _call: RequestRandomCall;

  constructor(call: RequestRandomCall) {
    this._call = call;
  }
}

export class RequestRandomCall__Outputs {
  _call: RequestRandomCall;

  constructor(call: RequestRandomCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateEpochCall extends ethereum.Call {
  get inputs(): UpdateEpochCall__Inputs {
    return new UpdateEpochCall__Inputs(this);
  }

  get outputs(): UpdateEpochCall__Outputs {
    return new UpdateEpochCall__Outputs(this);
  }
}

export class UpdateEpochCall__Inputs {
  _call: UpdateEpochCall;

  constructor(call: UpdateEpochCall) {
    this._call = call;
  }
}

export class UpdateEpochCall__Outputs {
  _call: UpdateEpochCall;

  constructor(call: UpdateEpochCall) {
    this._call = call;
  }
}

export class UpdateInfoCall extends ethereum.Call {
  get inputs(): UpdateInfoCall__Inputs {
    return new UpdateInfoCall__Inputs(this);
  }

  get outputs(): UpdateInfoCall__Outputs {
    return new UpdateInfoCall__Outputs(this);
  }
}

export class UpdateInfoCall__Inputs {
  _call: UpdateInfoCall;

  constructor(call: UpdateInfoCall) {
    this._call = call;
  }

  get stakingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateInfoCall__Outputs {
  _call: UpdateInfoCall;

  constructor(call: UpdateInfoCall) {
    this._call = call;
  }
}

export class WithdrawDaiFromVotingCall extends ethereum.Call {
  get inputs(): WithdrawDaiFromVotingCall__Inputs {
    return new WithdrawDaiFromVotingCall__Inputs(this);
  }

  get outputs(): WithdrawDaiFromVotingCall__Outputs {
    return new WithdrawDaiFromVotingCall__Outputs(this);
  }
}

export class WithdrawDaiFromVotingCall__Inputs {
  _call: WithdrawDaiFromVotingCall;

  constructor(call: WithdrawDaiFromVotingCall) {
    this._call = call;
  }

  get votingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get voter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get daiNumber(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class WithdrawDaiFromVotingCall__Outputs {
  _call: WithdrawDaiFromVotingCall;

  constructor(call: WithdrawDaiFromVotingCall) {
    this._call = call;
  }
}

export class WithdrawZooFromVotingCall extends ethereum.Call {
  get inputs(): WithdrawZooFromVotingCall__Inputs {
    return new WithdrawZooFromVotingCall__Inputs(this);
  }

  get outputs(): WithdrawZooFromVotingCall__Outputs {
    return new WithdrawZooFromVotingCall__Outputs(this);
  }
}

export class WithdrawZooFromVotingCall__Inputs {
  _call: WithdrawZooFromVotingCall;

  constructor(call: WithdrawZooFromVotingCall) {
    this._call = call;
  }

  get votingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get voter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get zooNumber(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class WithdrawZooFromVotingCall__Outputs {
  _call: WithdrawZooFromVotingCall;

  constructor(call: WithdrawZooFromVotingCall) {
    this._call = call;
  }
}
