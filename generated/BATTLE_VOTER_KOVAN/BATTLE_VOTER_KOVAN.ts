// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NftBattleArenaSetted extends ethereum.Event {
  get params(): NftBattleArenaSetted__Params {
    return new NftBattleArenaSetted__Params(this);
  }
}

export class NftBattleArenaSetted__Params {
  _event: NftBattleArenaSetted;

  constructor(event: NftBattleArenaSetted) {
    this._event = event;
  }

  get nftBattleArena(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BATTLE_VOTER_KOVAN extends ethereum.SmartContract {
  static bind(address: Address): BATTLE_VOTER_KOVAN {
    return new BATTLE_VOTER_KOVAN("BATTLE_VOTER_KOVAN", address);
  }

  addDaiToPosition(votingPositionId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "addDaiToPosition",
      "addDaiToPosition(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(votingPositionId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_addDaiToPosition(
    votingPositionId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addDaiToPosition",
      "addDaiToPosition(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(votingPositionId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addZooToPosition(votingPositionId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "addZooToPosition",
      "addZooToPosition(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(votingPositionId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_addZooToPosition(
    votingPositionId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addZooToPosition",
      "addZooToPosition(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(votingPositionId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dai(): Address {
    let result = super.call("dai", "dai():(address)", []);

    return result[0].toAddress();
  }

  try_dai(): ethereum.CallResult<Address> {
    let result = super.tryCall("dai", "dai():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftBattleArena(): Address {
    let result = super.call("nftBattleArena", "nftBattleArena():(address)", []);

    return result[0].toAddress();
  }

  try_nftBattleArena(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nftBattleArena",
      "nftBattleArena():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  zoo(): Address {
    let result = super.call("zoo", "zoo():(address)", []);

    return result[0].toAddress();
  }

  try_zoo(): ethereum.CallResult<Address> {
    let result = super.tryCall("zoo", "zoo():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _dai(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _zoo(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddDaiToPositionCall extends ethereum.Call {
  get inputs(): AddDaiToPositionCall__Inputs {
    return new AddDaiToPositionCall__Inputs(this);
  }

  get outputs(): AddDaiToPositionCall__Outputs {
    return new AddDaiToPositionCall__Outputs(this);
  }
}

export class AddDaiToPositionCall__Inputs {
  _call: AddDaiToPositionCall;

  constructor(call: AddDaiToPositionCall) {
    this._call = call;
  }

  get votingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddDaiToPositionCall__Outputs {
  _call: AddDaiToPositionCall;

  constructor(call: AddDaiToPositionCall) {
    this._call = call;
  }

  get votes(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddZooToPositionCall extends ethereum.Call {
  get inputs(): AddZooToPositionCall__Inputs {
    return new AddZooToPositionCall__Inputs(this);
  }

  get outputs(): AddZooToPositionCall__Outputs {
    return new AddZooToPositionCall__Outputs(this);
  }
}

export class AddZooToPositionCall__Inputs {
  _call: AddZooToPositionCall;

  constructor(call: AddZooToPositionCall) {
    this._call = call;
  }

  get votingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddZooToPositionCall__Outputs {
  _call: AddZooToPositionCall;

  constructor(call: AddZooToPositionCall) {
    this._call = call;
  }

  get votes(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BatchClaimRewardsFromVotingsCall extends ethereum.Call {
  get inputs(): BatchClaimRewardsFromVotingsCall__Inputs {
    return new BatchClaimRewardsFromVotingsCall__Inputs(this);
  }

  get outputs(): BatchClaimRewardsFromVotingsCall__Outputs {
    return new BatchClaimRewardsFromVotingsCall__Outputs(this);
  }
}

export class BatchClaimRewardsFromVotingsCall__Inputs {
  _call: BatchClaimRewardsFromVotingsCall;

  constructor(call: BatchClaimRewardsFromVotingsCall) {
    this._call = call;
  }

  get votingPositionIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BatchClaimRewardsFromVotingsCall__Outputs {
  _call: BatchClaimRewardsFromVotingsCall;

  constructor(call: BatchClaimRewardsFromVotingsCall) {
    this._call = call;
  }
}

export class BatchWithdrawDaiFromVotingCall extends ethereum.Call {
  get inputs(): BatchWithdrawDaiFromVotingCall__Inputs {
    return new BatchWithdrawDaiFromVotingCall__Inputs(this);
  }

  get outputs(): BatchWithdrawDaiFromVotingCall__Outputs {
    return new BatchWithdrawDaiFromVotingCall__Outputs(this);
  }
}

export class BatchWithdrawDaiFromVotingCall__Inputs {
  _call: BatchWithdrawDaiFromVotingCall;

  constructor(call: BatchWithdrawDaiFromVotingCall) {
    this._call = call;
  }

  get votingPositionIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get daiNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class BatchWithdrawDaiFromVotingCall__Outputs {
  _call: BatchWithdrawDaiFromVotingCall;

  constructor(call: BatchWithdrawDaiFromVotingCall) {
    this._call = call;
  }
}

export class ClaimRewardFromVotingCall extends ethereum.Call {
  get inputs(): ClaimRewardFromVotingCall__Inputs {
    return new ClaimRewardFromVotingCall__Inputs(this);
  }

  get outputs(): ClaimRewardFromVotingCall__Outputs {
    return new ClaimRewardFromVotingCall__Outputs(this);
  }
}

export class ClaimRewardFromVotingCall__Inputs {
  _call: ClaimRewardFromVotingCall;

  constructor(call: ClaimRewardFromVotingCall) {
    this._call = call;
  }

  get votingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimRewardFromVotingCall__Outputs {
  _call: ClaimRewardFromVotingCall;

  constructor(call: ClaimRewardFromVotingCall) {
    this._call = call;
  }
}

export class CreateNewVotingPositionCall extends ethereum.Call {
  get inputs(): CreateNewVotingPositionCall__Inputs {
    return new CreateNewVotingPositionCall__Inputs(this);
  }

  get outputs(): CreateNewVotingPositionCall__Outputs {
    return new CreateNewVotingPositionCall__Outputs(this);
  }
}

export class CreateNewVotingPositionCall__Inputs {
  _call: CreateNewVotingPositionCall;

  constructor(call: CreateNewVotingPositionCall) {
    this._call = call;
  }

  get stakingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateNewVotingPositionCall__Outputs {
  _call: CreateNewVotingPositionCall;

  constructor(call: CreateNewVotingPositionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetNftBattleArenaCall extends ethereum.Call {
  get inputs(): SetNftBattleArenaCall__Inputs {
    return new SetNftBattleArenaCall__Inputs(this);
  }

  get outputs(): SetNftBattleArenaCall__Outputs {
    return new SetNftBattleArenaCall__Outputs(this);
  }
}

export class SetNftBattleArenaCall__Inputs {
  _call: SetNftBattleArenaCall;

  constructor(call: SetNftBattleArenaCall) {
    this._call = call;
  }

  get _nftBattleArena(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNftBattleArenaCall__Outputs {
  _call: SetNftBattleArenaCall;

  constructor(call: SetNftBattleArenaCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawDaiFromVotingPositionCall extends ethereum.Call {
  get inputs(): WithdrawDaiFromVotingPositionCall__Inputs {
    return new WithdrawDaiFromVotingPositionCall__Inputs(this);
  }

  get outputs(): WithdrawDaiFromVotingPositionCall__Outputs {
    return new WithdrawDaiFromVotingPositionCall__Outputs(this);
  }
}

export class WithdrawDaiFromVotingPositionCall__Inputs {
  _call: WithdrawDaiFromVotingPositionCall;

  constructor(call: WithdrawDaiFromVotingPositionCall) {
    this._call = call;
  }

  get votingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get daiNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawDaiFromVotingPositionCall__Outputs {
  _call: WithdrawDaiFromVotingPositionCall;

  constructor(call: WithdrawDaiFromVotingPositionCall) {
    this._call = call;
  }
}

export class WithdrawZooFromVotingPositionCall extends ethereum.Call {
  get inputs(): WithdrawZooFromVotingPositionCall__Inputs {
    return new WithdrawZooFromVotingPositionCall__Inputs(this);
  }

  get outputs(): WithdrawZooFromVotingPositionCall__Outputs {
    return new WithdrawZooFromVotingPositionCall__Outputs(this);
  }
}

export class WithdrawZooFromVotingPositionCall__Inputs {
  _call: WithdrawZooFromVotingPositionCall;

  constructor(call: WithdrawZooFromVotingPositionCall) {
    this._call = call;
  }

  get votingPositionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get zooNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawZooFromVotingPositionCall__Outputs {
  _call: WithdrawZooFromVotingPositionCall;

  constructor(call: WithdrawZooFromVotingPositionCall) {
    this._call = call;
  }
}
